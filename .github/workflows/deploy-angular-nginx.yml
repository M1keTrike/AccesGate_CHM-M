name: Deploy Access-Gate Frontend

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Clonar repositorio
      - name: Clonar repositorio
        uses: actions/checkout@v4

      # 2️⃣ Moverse al directorio correcto antes de construir la imagen
      - name: Construir imagen Docker
        run: |
          cd Access-Gate-APP/Access-Gate || exit 1  # Salir si no existe
          docker build -t access-gate-frontend:${{ github.sha }} .

      # 3️⃣ Exportar la imagen para transferencia
      - name: Exportar imagen Docker
        run: |
          docker save access-gate-frontend:${{ github.sha }} | gzip > access-gate.tar.gz

      # 4️⃣ Transferir la imagen al servidor
      - name: Subir imagen al servidor
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: access-gate.tar.gz
          target: /home/ubuntu/

      # 5️⃣ Desplegar en el servidor
      - name: Desplegar en el servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Detener y eliminar el contenedor anterior si existe
            docker stop access-gate-frontend || true
            docker rm access-gate-frontend || true

            # Eliminar la imagen anterior para evitar acumulación
            docker rmi $(docker images -q access-gate-frontend) || true

            # Cargar la nueva imagen en Docker
            docker load < /home/ubuntu/access-gate.tar.gz

            # Ejecutar el nuevo contenedor
            docker run -d --name access-gate-frontend -p 80:80 --restart unless-stopped access-gate-frontend:${{ github.sha }}

            # Limpiar archivos temporales
            rm /home/ubuntu/access-gate.tar.gz
